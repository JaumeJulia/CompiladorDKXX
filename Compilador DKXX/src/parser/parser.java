
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ArbolSintactico.ArbolSintactico;
import ArbolSintactico.ArbolSintactico.*;
import ArbolSintactico.Tipo;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\005\000\002\003\002\000\002\023\004" +
    "\000\002\023\002\000\002\022\004\000\002\022\007\000" +
    "\002\022\005\000\002\022\011\000\002\022\011\000\002" +
    "\022\004\000\002\025\004\000\002\025\002\000\002\026" +
    "\005\000\002\026\004\000\002\026\007\000\002\026\005" +
    "\000\002\026\011\000\002\026\011\000\002\026\004\000" +
    "\002\024\003\000\002\024\003\000\002\004\013\000\002" +
    "\005\003\000\002\005\002\000\002\006\005\000\002\006" +
    "\002\000\002\007\006\000\002\007\002\000\002\010\006" +
    "\000\002\010\005\000\002\011\003\000\002\011\002\000" +
    "\002\012\003\000\002\012\003\000\002\013\004\000\002" +
    "\014\004\000\002\014\006\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\005\000\002\015\004" +
    "\000\002\016\004\000\002\016\002\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\005\000\002\021\003\000" +
    "\002\021\005\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\040\004\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\023\ufffd\034\015\035\011\036\017\037\014\001" +
    "\002\000\014\023\ufffd\034\015\035\011\036\017\037\014" +
    "\001\002\000\006\036\017\037\014\001\002\000\004\033" +
    "\210\001\002\000\004\023\147\001\002\000\004\042\uffdd" +
    "\001\002\000\010\036\017\037\014\042\uffe7\001\002\000" +
    "\004\042\020\001\002\000\004\042\uffde\001\002\000\006" +
    "\010\022\033\uffdf\001\002\000\004\033\uffe0\001\002\000" +
    "\014\020\031\031\026\042\024\043\025\044\032\001\002" +
    "\000\004\033\uffe1\001\002\000\042\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\060\021\uffd9\027\uffd9\032\uffd9\033" +
    "\uffd9\001\002\000\040\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\021\uffd8\027\uffd8\032\uffd8\033\uffd8\001\002\000\004" +
    "\020\055\001\002\000\040\004\040\005\044\006\037\007" +
    "\046\011\043\012\042\013\050\014\045\015\052\016\051" +
    "\017\035\021\uffd3\027\047\032\uffd3\033\uffd3\001\002\000" +
    "\004\033\uffdc\001\002\000\014\020\031\031\026\042\024" +
    "\043\025\044\032\001\002\000\040\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\021\uffd7\027\uffd7\032\uffd7\033\uffd7\001" +
    "\002\000\004\021\034\001\002\000\040\004\040\005\044" +
    "\006\037\007\046\011\043\012\042\013\050\014\045\015" +
    "\052\016\051\017\035\021\uffd3\027\047\032\uffd3\033\uffd3" +
    "\001\002\000\014\020\uffc7\031\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\001\002\000\014\020\031\031\026\042\024\043\025" +
    "\044\032\001\002\000\014\020\uffd0\031\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\001\002\000\014\020\uffd2\031\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\001\002\000\010\021\uffda\032\uffda\033" +
    "\uffda\001\002\000\014\020\uffcd\031\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\001\002\000\014\020\uffce\031\uffce\042\uffce\043" +
    "\uffce\044\uffce\001\002\000\014\020\uffd1\031\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\001\002\000\014\020\uffcb\031\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\001\002\000\014\020\uffcf\031\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\001\002\000\014\020\uffc9\031" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\014\020\uffcc" +
    "\031\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002\000\014\020" +
    "\uffc8\031\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000\014" +
    "\020\uffca\031\uffca\042\uffca\043\uffca\044\uffca\001\002\000" +
    "\010\021\uffd4\032\uffd4\033\uffd4\001\002\000\010\021\uffdb" +
    "\032\uffdb\033\uffdb\001\002\000\004\021\056\001\002\000" +
    "\040\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\027" +
    "\uffd6\032\uffd6\033\uffd6\001\002\000\040\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\027\uffd5\032\uffd5\033\uffd5" +
    "\001\002\000\016\020\031\021\uffc3\031\026\042\024\043" +
    "\025\044\032\001\002\000\006\021\uffc5\032\064\001\002" +
    "\000\004\021\063\001\002\000\040\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\021\uffc6\027\uffc6\032\uffc6\033\uffc6\001" +
    "\002\000\016\020\031\021\uffc3\031\026\042\024\043\025" +
    "\044\032\001\002\000\004\021\uffc4\001\002\000\004\042" +
    "\070\001\002\000\004\042\uffe8\001\002\000\004\020\071" +
    "\001\002\000\010\021\uffe5\036\017\037\014\001\002\000" +
    "\004\021\102\001\002\000\004\042\074\001\002\000\006" +
    "\021\uffe3\032\076\001\002\000\004\021\uffe6\001\002\000" +
    "\006\036\017\037\014\001\002\000\004\042\100\001\002" +
    "\000\006\021\uffe3\032\076\001\002\000\004\021\uffe4\001" +
    "\002\000\004\022\103\001\002\000\026\003\112\023\ufff3" +
    "\024\105\025\104\026\110\030\114\035\011\036\017\037" +
    "\014\042\111\001\002\000\004\020\141\001\002\000\014" +
    "\020\031\031\026\042\024\043\025\044\032\001\002\000" +
    "\026\003\112\023\ufff3\024\105\025\104\026\110\030\114" +
    "\035\011\036\017\037\014\042\111\001\002\000\004\033" +
    "\135\001\002\000\004\020\127\001\002\000\006\010\022" +
    "\020\060\001\002\000\004\033\122\001\002\000\004\023" +
    "\121\001\002\000\004\020\115\001\002\000\014\020\031" +
    "\031\026\042\024\043\025\044\032\001\002\000\004\021" +
    "\117\001\002\000\004\033\120\001\002\000\026\003\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\042\ufff0\001\002\000\014\023\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\001\002\000\026\003\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\030\uffec\035\uffec\036\uffec" +
    "\037\uffec\042\uffec\001\002\000\004\033\uffeb\001\002\000" +
    "\004\033\uffea\001\002\000\004\033\126\001\002\000\026" +
    "\003\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030\uffef\035" +
    "\uffef\036\uffef\037\uffef\042\uffef\001\002\000\014\020\031" +
    "\031\026\042\024\043\025\044\032\001\002\000\004\021" +
    "\131\001\002\000\004\022\132\001\002\000\026\003\112" +
    "\023\ufff3\024\105\025\104\026\110\030\114\035\011\036" +
    "\017\037\014\042\111\001\002\000\004\023\134\001\002" +
    "\000\026\003\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030" +
    "\uffed\035\uffed\036\uffed\037\uffed\042\uffed\001\002\000\026" +
    "\003\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\042\ufff1\001\002\000\004\023\ufff4" +
    "\001\002\000\004\033\140\001\002\000\026\003\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\042\ufff2\001\002\000\014\020\031\031\026\042" +
    "\024\043\025\044\032\001\002\000\004\021\143\001\002" +
    "\000\004\022\144\001\002\000\026\003\112\023\ufff3\024" +
    "\105\025\104\026\110\030\114\035\011\036\017\037\014" +
    "\042\111\001\002\000\004\023\146\001\002\000\026\003" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\035\uffee" +
    "\036\uffee\037\uffee\042\uffee\001\002\000\004\041\150\001" +
    "\002\000\004\022\151\001\002\000\024\003\160\023\ufffb" +
    "\025\152\026\155\030\161\035\011\036\017\037\014\042" +
    "\157\001\002\000\004\020\202\001\002\000\004\023\201" +
    "\001\002\000\004\033\200\001\002\000\004\020\172\001" +
    "\002\000\024\003\160\023\ufffb\025\152\026\155\030\161" +
    "\035\011\036\017\037\014\042\157\001\002\000\006\010" +
    "\022\020\060\001\002\000\004\033\166\001\002\000\004" +
    "\020\162\001\002\000\014\020\031\031\026\042\024\043" +
    "\025\044\032\001\002\000\004\021\164\001\002\000\004" +
    "\033\165\001\002\000\024\003\ufff9\023\ufff9\025\ufff9\026" +
    "\ufff9\030\ufff9\035\ufff9\036\ufff9\037\ufff9\042\ufff9\001\002" +
    "\000\024\003\ufff5\023\ufff5\025\ufff5\026\ufff5\030\ufff5\035" +
    "\ufff5\036\ufff5\037\ufff5\042\ufff5\001\002\000\004\033\170" +
    "\001\002\000\024\003\ufff8\023\ufff8\025\ufff8\026\ufff8\030" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\042\ufff8\001\002\000\004" +
    "\023\ufffc\001\002\000\014\020\031\031\026\042\024\043" +
    "\025\044\032\001\002\000\004\021\174\001\002\000\004" +
    "\022\175\001\002\000\024\003\160\023\ufffb\025\152\026" +
    "\155\030\161\035\011\036\017\037\014\042\157\001\002" +
    "\000\004\023\177\001\002\000\024\003\ufff6\023\ufff6\025" +
    "\ufff6\026\ufff6\030\ufff6\035\ufff6\036\ufff6\037\ufff6\042\ufff6" +
    "\001\002\000\024\003\ufffa\023\ufffa\025\ufffa\026\ufffa\030" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\042\ufffa\001\002\000\004" +
    "\002\000\001\002\000\014\020\031\031\026\042\024\043" +
    "\025\044\032\001\002\000\004\021\204\001\002\000\004" +
    "\022\205\001\002\000\024\003\160\023\ufffb\025\152\026" +
    "\155\030\161\035\011\036\017\037\014\042\157\001\002" +
    "\000\004\023\207\001\002\000\024\003\ufff7\023\ufff7\025" +
    "\ufff7\026\ufff7\030\ufff7\035\ufff7\036\ufff7\037\ufff7\042\ufff7" +
    "\001\002\000\014\023\ufffd\034\015\035\011\036\017\037" +
    "\014\001\002\000\004\023\ufffe\001\002\000\004\042\213" +
    "\001\002\000\006\010\022\033\uffdf\001\002\000\004\033" +
    "\uffe2\001\002\000\004\023\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\012\004\007" +
    "\010\011\012\015\001\001\000\012\003\214\004\007\010" +
    "\011\012\015\001\001\000\004\012\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\065\012\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\022\013\020\001\001\000\002\001\001\000" +
    "\006\014\027\015\026\001\001\000\002\001\001\000\004" +
    "\020\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\053\017\035\001\001\000\002\001\001\000\006" +
    "\014\032\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\040\017\035\001\001\000\002\001\001" +
    "\000\006\014\052\015\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\060\015\026\021\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\060\015\026" +
    "\021\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\071\012\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\074\001\001\000\002\001\001\000\004\012\076\001\001" +
    "\000\002\001\001\000\004\007\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\106\012\015\025\112" +
    "\026\105\001\001\000\002\001\001\000\006\014\136\015" +
    "\026\001\001\000\012\010\106\012\015\025\135\026\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\122\020\123\024\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\115\015\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\127\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\106\012\015\025\132\026\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\141\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\106\012\015\025\144\026\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\153\012\015\022\155\023\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\153\012\015\022\155" +
    "\023\170\001\001\000\010\013\122\020\123\024\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\162" +
    "\015\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\172\015\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\153" +
    "\012\015\022\155\023\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\202\015\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\153\012\015\022\155\023\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\210\004" +
    "\007\010\011\012\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\213\013\020\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArbolSintactico arbol= new ArbolSintactico();
    ArrayList<String> errores = new ArrayList<>();

    public ArbolSintactico getArbol(){
        return arbol;
    }

    // Semantico Prioridad de operaciones.
    public Expresion PrioridadOperacion(Expresion e) {
        // Se verifica que haya dos operaciones.
        if (e.getOper() != null && e.getOper().getExpr().getOper() != null) {
            Operaciones OpActual = e.getOper().getOper();
            Operaciones OpAnterior = e.getOper().getExpr().getOper().getOper();
            // Se mira el orden de prioridad para reorganizar los valores.
            if (OpActual.compareTo(OpAnterior) < 0) {
                Operacion op = e.getOper().getExpr().getOper();
                e.getOper().getExpr().setOper(null);

                // Si hay una expresion vacia esta se elimina para evitar problemas.
                if(e.getOper().getExpr().getOper() == null && e.getOper().getExpr().isExpr()){
                    Expresion a = e.getOper().getExpr().getExpr();
                    e.getOper().setExpr(a);
                }
                // Se llama de forma recursiva con la nueva expresion para organizar las operaciones en ella.
                Expresion new_e = new Expresion(PrioridadOperacion(e), op);
                return new_e;
            }
        }
        return e;
    }

    //Tratamiento errores.
    @Override
    public void syntax_error(Symbol cur_token) {
        String mensaje = "\t - " + cur_token.toString() + "." + this.showExpectedTokenIds() + " en linea " + cur_token.left + " en columna " + cur_token.right;
        this.report_error(mensaje, cur_token);
    }

    @Override
    public void report_fatal_error(String mensaje, Object info) {
        //report_error(mensaje, null);
    }

    @Override
    public void report_error(String mensaje, Object info) {
        errores.add(mensaje);
    }

    private String showExpectedTokenIds() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList<>();
        for (Integer expected : ids) {
            list.add(this.symbl_name_from_id(expected.intValue()));
        }
        if (list.size() > 0) {
            return " Se esperaba: " + list.toString();
        } else {
            return "";
        }
    }

    public boolean hayErrores(){
        return !errores.isEmpty();
    }

    public String toStringErrores(){
        String s = "";
        for(String e : errores){
            s += e + "\n";
        }
        return s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Init start_val = (Init)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= DECLARE LKEY DEF RKEY MAIN LKEY SENTENCIAS RKEY 
            {
              Init RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias m = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.setRaiz(new Init(d, m)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEF ::= DFUNCION DEF 
            {
              Def RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dfuncion f = (Dfuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Def(f,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEF ::= DECLARACION PUNTYCOMA DEF 
            {
              Def RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declaracion f = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Def(f, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= 
            {
              Def RESULT =null;
		   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Sentencias RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sentencias(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= 
            {
              Sentencias RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new Sentencia(new Out(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ID SENTENCIA_ID PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaId d = (SentenciaId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new IdSentencia(new Id(i), d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new While(e, s));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new If(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= error PUNTYCOMA 
            {
              Sentencia RESULT =null;
		 parser.report_error("sentencia", "WRONG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // R_SENTENCIAS ::= R_SENTENCIA R_SENTENCIAS 
            {
              Sentencias RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Sentencias(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // R_SENTENCIAS ::= 
            {
              Sentencias RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // R_SENTENCIA ::= RETRN EXPRESION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new Return(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // R_SENTENCIA ::= DECLARACION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // R_SENTENCIA ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new Sentencia(new Out(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // R_SENTENCIA ::= ID SENTENCIA_ID PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaId d = (SentenciaId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new IdSentencia(new Id(i), d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // R_SENTENCIA ::= WHILE LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new While(e, s));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // R_SENTENCIA ::= IF LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Sentencia(new If(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // R_SENTENCIA ::= error PUNTYCOMA 
            {
              Sentencia RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_ID ::= ASIGNACION 
            {
              SentenciaId RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new SentenciaId(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_ID ::= FUNCION 
            {
              SentenciaId RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param f = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new SentenciaId(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DFUNCION ::= FUNCTION RETURN ID LPAREN PARAMETRO RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Dfuncion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo r = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Dparam p = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Dfuncion(new Id(i), r, p, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DFUNCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= TYPE 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RETURN ::= 
            {
              Tipo RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO ::= TYPE ID PARAMCONCAT 
            {
              Dparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dparam d = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Dparam(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETRO ::= 
            {
              Dparam RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMCONCAT ::= COMA TYPE ID PARAMCONCAT 
            {
              Dparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dparam d = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Dparam(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMCONCAT ::= 
            {
              Dparam RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= CONST TYPE ID DECLAREND 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Declaracion(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TYPE ID DECLAREND 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Declaracion(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLAREND ::= ASIGNACION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLAREND ::= 
            {
              Expresion RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE ::= INT 
            {
              Tipo RESULT =null;
		 RESULT= Tipo.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT= Tipo.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= VALOR OPERACION 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion o = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= PrioridadOperacion(new Expresion(v, o)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= LPAREN EXPRESION RPAREN OPERACION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion o = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Expresion(e,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOR ::= ID 
            {
              Valor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new Valor(new Id(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= NUMERO 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Valor(new Numero(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= BOLEAN 
            {
              Valor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Valor(new Boleano(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= IN LPAREN RPAREN 
            {
              Valor RESULT =null;
		  RESULT= new Valor(new In()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= ID FUNCION 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param f = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new Valor(new IdSentencia(new Id(i), new SentenciaId(f))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION ::= OP EXPRESION 
            {
              Operacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operaciones o = (Operaciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new Operacion(o,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= 
            {
              Operacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= MULT 
            {
              Operaciones RESULT =null;
		  RESULT= Operaciones.MULT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP ::= DIV 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP ::= SUMA 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP ::= RESTA 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.RESTA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP ::= MAYORQUE 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.MAYORQUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP ::= MENORQUE 
            {
              Operaciones RESULT =null;
		  RESULT= Operaciones.MENORQUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP ::= MAYORIGU 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.MAYORIGU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP ::= MENORIGU 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.MENORIGU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= IGUALES 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.IGUALES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP ::= NIGUALES 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.NIGUALES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP ::= OR 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP ::= AND 
            {
              Operaciones RESULT =null;
		 RESULT= Operaciones.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= LPAREN INPARAM RPAREN 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param i = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= i;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INPARAM ::= EXPRESION 
            {
              Param RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Param(e, null);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INPARAM ::= EXPRESION COMA INPARAM 
            {
              Param RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Param(e, p);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INPARAM ::= 
            {
              Param RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
