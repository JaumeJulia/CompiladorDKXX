package parser;

import java_cup.runtime.*;
import parser.symbols.*;

class Parser;

terminal                           MULT, DIV, SUMA, RESTA, IGUAL, MAYORQUE, MENORQUE, MAYORIGU, MENORIGU, 
                                   IGUALES, OR, AND, NOT, LPAREN, RPAREN, LKEY, RKEY, RETRN, WHILE, IF, NIGUALES,
                                   OUT, IN, COMA, PUNTYCOMA, FUNCTION, CONST, INT, BOOL, DECLARE, MAIN;
terminal        String             ID;
terminal        String            NUMERO;
terminal        String            BOLEAN;

non terminal    SymbolInit         INIT;
non terminal    SymbolDef          DEF;

/** non terminal    SymbolProg         PROG; **/
non terminal         DFUNCION;
non terminal           RETURN;
non terminal        PARAMETRO;
non terminal      PARAMCONCAT;
non terminal      DECLARACION;
non terminal        DECLAREND;
non terminal             TYPE;
non terminal       ASIGNACION;
non terminal        EXPRESION;
non terminal            VALOR;
non terminal        OPERACION;
non terminal               OP;
non terminal          FUNCION;
non terminal          INPARAM;

non terminal SENTENCIA;
non terminal SENTENCIAS;
non terminal SENTENCIA_ID;

non terminal R_SENTENCIAS;
non terminal R_SENTENCIA;

precedence right    IGUAL;
precedence left     SUMA, RESTA;
precedence left     MULT, DIV;

start with INIT;

INIT    ::=     DECLARE LKEY DEF RKEY MAIN LKEY SENTENCIAS RKEY
                {: System.out.println("Inicio"); :}
        ;

/** sentencias por prog antes **/

DEF     ::=    DFUNCION DEF {: System.out.println("DEF tipo 1"); :}
        |      DECLARACION PUNTYCOMA DEF {: System.out.println("DEF tipo 2"); :}
        |      {:  System.out.println(" No mas declaraciones "); :}
        ;

SENTENCIAS ::= SENTENCIA SENTENCIAS {: System.out.println("Sentancia"); :}
        |   {: System.out.println("No mas sentencias"); :}
        ;

SENTENCIA ::= DECLARACION  PUNTYCOMA                         {: System.out.println("Declaracion"); :}
        | OUT LPAREN EXPRESION RPAREN PUNTYCOMA              {: System.out.println("Ouput"); :}
        | ID SENTENCIA_ID PUNTYCOMA                          {: System.out.println("Sentencia_ID "); :}
        | WHILE LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY {: System.out.println("bucle while "); :}
        | IF LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY    {: System.out.println("Condicional "); :}
        | error PUNTYCOMA                                    {:  :}
        ;

R_SENTENCIAS ::= R_SENTENCIA R_SENTENCIAS {: System.out.println("R_Sentancia"); :}
        |   {: System.out.println("No mas R_sentencias"); :}
        ;

R_SENTENCIA    ::= RETRN EXPRESION:e PUNTYCOMA  {:  System.out.println("retorno "); :}
                | DECLARACION  PUNTYCOMA                         {: System.out.println("Declaracion"); :}
                | OUT LPAREN EXPRESION RPAREN PUNTYCOMA              {: System.out.println("Ouput"); :}
                | ID SENTENCIA_ID PUNTYCOMA                          {: System.out.println("Sentencia_ID "); :}
                | WHILE LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY {: System.out.println("bucle while "); :}
                | IF LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY    {: System.out.println("Condicional "); :}
                | error PUNTYCOMA                                    {:  :}
                ;

SENTENCIA_ID    ::= ASIGNACION {: System.out.println("Asignacio - Sentancia_ID"); :}
                | FUNCION {: System.out.println("Funcion Sentancia_id"); :}
                ;


DFUNCION    ::= FUNCTION RETURN ID LPAREN PARAMETRO RPAREN LKEY R_SENTENCIAS RKEY {: System.out.println("DECLARACION FUNCION "); :}
            ;


RETURN      ::= TYPE {:  :}
            | {:  :}
            ;

PARAMETRO   ::= TYPE ID PARAMCONCAT {: System.out.println("Parametro "); :}
            | {:  :}
            ;

PARAMCONCAT ::= COMA TYPE ID PARAMCONCAT {: System.out.println("Muchos parametros "); :}
            | {:  :}
            ;

DECLARACION ::= CONST TYPE ID DECLAREND {: System.out.println("Constantes"); :}
            | TYPE ID DECLAREND {: System.out.println("variable normal"); :}
            ;

DECLAREND   ::= ASIGNACION {: System.out.println("asignamos"); :}
            | {:  :}
            ;

TYPE        ::= INT {:  :}
            | BOOL {:  :}
            ;

ASIGNACION  ::= IGUAL EXPRESION {: System.out.println(" Asignacion "); :}
            ;

EXPRESION   ::= VALOR:v OPERACION {:System.out.println("Valor operacion : " + v); :}
            | LPAREN EXPRESION RPAREN OPERACION {: System.out.println("Parentesis expresion "); :}
            ;

VALOR       ::= ID:id {: System.out.println("Nombre: " + id); :}
            | NUMERO:n {: RESULT = n; :}
            | BOLEAN:b {: RESULT =b; :}
            | IN LPAREN RPAREN {: System.out.println("In"); :}
            | ID:id FUNCION {: System.out.println("Funcion:" + id); :}
            ;

OPERACION   ::= OP EXPRESION {: System.out.println("operacion y expresion");:} 
            | {:System.out.println("Operacion=null");:}
            ;

OP          ::= MULT {: System.out.println("Mult "); :}
            | DIV {:System.out.println("Div "); :}
            | SUMA {: System.out.println("suma"); :}
            | RESTA {: System.out.println("resta "); :}
            | MAYORQUE {: System.out.println("Mayorque "); :}
            | MENORQUE {:  System.out.println("Menorque ");:}
            | MAYORIGU {: System.out.println("MayorIgual "); :}
            | MENORIGU {: System.out.println("Menorigual "); :}
            | IGUALES {: System.out.println("Iguales "); :}
            | NIGUALES {: System.out.println("No iguales "); :}
            | OR {: System.out.println("or "); :}
            | AND {: System.out.println("and "); :}
            | NOT {: System.out.println("not "); :}
            ;

FUNCION     ::= LPAREN INPARAM RPAREN{:  :}
            ;

INPARAM     ::= EXPRESION {:  :}
            | EXPRESION COMA INPARAM {:  :}
            | {:  :}
            ;
