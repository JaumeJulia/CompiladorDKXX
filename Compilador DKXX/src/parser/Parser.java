
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import parser.symbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\006" +
    "\000\002\004\004\000\002\004\004\000\002\025\007\000" +
    "\002\025\007\000\002\026\007\000\002\026\004\000\002" +
    "\026\004\000\002\005\006\000\002\005\004\000\002\005" +
    "\002\000\002\006\013\000\002\007\003\000\002\007\002" +
    "\000\002\010\005\000\002\010\002\000\002\011\006\000" +
    "\002\011\002\000\002\012\006\000\002\012\005\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\004\000\002\016\004\000\002\016\006" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\004\000\002\020\002\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\022\006\000\002" +
    "\023\004\000\002\023\002\000\002\024\005\000\002\024" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\037\004\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\023\ufffd\033\015\034\010\035\017\036\014\001" +
    "\002\000\006\035\017\036\014\001\002\000\014\023\ufffd" +
    "\033\015\034\010\035\017\036\014\001\002\000\014\023" +
    "\ufffd\033\015\034\010\035\017\036\014\001\002\000\004" +
    "\023\151\001\002\000\004\041\uffe5\001\002\000\010\035" +
    "\017\036\014\041\uffef\001\002\000\004\041\020\001\002" +
    "\000\004\041\uffe6\001\002\000\006\010\023\032\022\001" +
    "\002\000\026\023\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\041\uffe8\001\002\000" +
    "\026\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\041\uffe7\001\002\000\014\020" +
    "\033\030\027\041\025\042\026\043\034\001\002\000\026" +
    "\023\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\041\uffe9\001\002\000\064\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\060\021\uffe1\023\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\041\uffe1\001\002\000\062" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\023\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0\001\002\000\004" +
    "\020\056\001\002\000\062\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\021\uffde\023\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\041\uffde\001\002\000\062\004\042\005\046\006\041\007" +
    "\050\011\045\012\044\013\051\014\047\015\053\016\052" +
    "\017\037\021\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\041\uffdc\001\002\000\026\023\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\041\uffe4" +
    "\001\002\000\014\020\033\030\027\041\025\042\026\043" +
    "\034\001\002\000\062\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\021\uffdf\023\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\041" +
    "\uffdf\001\002\000\004\021\036\001\002\000\062\004\042" +
    "\005\046\006\041\007\050\011\045\012\044\013\051\014" +
    "\047\015\053\016\052\017\037\021\uffdc\023\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\041\uffdc\001\002\000\014\020\uffd1" +
    "\030\uffd1\041\uffd1\042\uffd1\043\uffd1\001\002\000\014\020" +
    "\033\030\027\041\025\042\026\043\034\001\002\000\014" +
    "\020\uffd9\030\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002\000" +
    "\014\020\uffdb\030\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002" +
    "\000\034\021\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\041\uffe2\001\002\000\014\020\uffd6\030\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\001\002\000\014\020\uffd7\030\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\001\002\000\014\020\uffda\030\uffda\041" +
    "\uffda\042\uffda\043\uffda\001\002\000\014\020\uffd4\030\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\001\002\000\014\020\uffd8\030" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\001\002\000\014\020\uffd5" +
    "\030\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002\000\014\020" +
    "\uffd2\030\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\014" +
    "\020\uffd3\030\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002\000" +
    "\034\021\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\041" +
    "\uffdd\001\002\000\034\021\uffe3\023\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\041\uffe3\001\002\000\004\021\057\001\002" +
    "\000\062\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\023\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\001\002" +
    "\000\016\020\033\021\uffcd\030\027\041\025\042\026\043" +
    "\034\001\002\000\004\021\067\001\002\000\006\021\uffcb" +
    "\031\063\001\002\000\014\020\033\030\027\041\025\042" +
    "\026\043\034\001\002\000\004\021\uffce\001\002\000\006" +
    "\021\uffcb\031\063\001\002\000\004\021\uffcc\001\002\000" +
    "\062\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf\023" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\001\002\000" +
    "\004\041\072\001\002\000\004\041\ufff0\001\002\000\004" +
    "\020\073\001\002\000\010\021\uffed\035\017\036\014\001" +
    "\002\000\004\021\104\001\002\000\004\041\076\001\002" +
    "\000\006\021\uffeb\031\100\001\002\000\004\021\uffee\001" +
    "\002\000\006\035\017\036\014\001\002\000\004\041\102" +
    "\001\002\000\006\021\uffeb\031\100\001\002\000\004\021" +
    "\uffec\001\002\000\004\022\105\001\002\000\026\023\ufff2" +
    "\024\107\025\106\026\114\027\120\030\027\034\010\035" +
    "\017\036\014\041\116\001\002\000\004\020\145\001\002" +
    "\000\014\020\033\030\027\041\025\042\026\043\034\001" +
    "\002\000\022\025\106\026\114\027\120\030\027\034\010" +
    "\035\017\036\014\041\116\001\002\000\026\023\ufff2\024" +
    "\107\025\106\026\114\027\120\030\027\034\010\035\017" +
    "\036\014\041\116\001\002\000\022\025\106\026\114\027" +
    "\120\030\027\034\010\035\017\036\014\041\116\001\002" +
    "\000\004\023\136\001\002\000\004\020\132\001\002\000" +
    "\022\025\106\026\114\027\120\030\027\034\010\035\017" +
    "\036\014\041\116\001\002\000\006\010\023\020\060\001" +
    "\002\000\004\032\125\001\002\000\004\020\121\001\002" +
    "\000\014\020\033\030\027\041\025\042\026\043\034\001" +
    "\002\000\004\021\123\001\002\000\004\032\124\001\002" +
    "\000\022\025\ufff7\026\ufff7\027\ufff7\030\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\041\ufff7\001\002\000\022\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5\001" +
    "\002\000\022\025\ufff6\026\ufff6\027\ufff6\030\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\041\ufff6\001\002\000\004\023\130\001" +
    "\002\000\022\025\106\026\114\027\120\030\027\034\010" +
    "\035\017\036\014\041\116\001\002\000\026\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\041\ufffc\001\002\000\014\020\033\030\027\041" +
    "\025\042\026\043\034\001\002\000\004\021\134\001\002" +
    "\000\004\022\135\001\002\000\022\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\034\ufff9\035\ufff9\036\ufff9\041\ufff9\001\002" +
    "\000\014\023\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\001" +
    "\002\000\026\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\034\ufffb\035\ufffb\036\ufffb\041\ufffb\001\002\000" +
    "\004\023\ufff3\001\002\000\026\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\034\ufffa\035\ufffa\036\ufffa\041" +
    "\ufffa\001\002\000\004\032\143\001\002\000\026\023\ufff2" +
    "\024\107\025\106\026\114\027\120\030\027\034\010\035" +
    "\017\036\014\041\116\001\002\000\004\023\ufff4\001\002" +
    "\000\014\020\033\030\027\041\025\042\026\043\034\001" +
    "\002\000\004\021\147\001\002\000\004\022\150\001\002" +
    "\000\022\025\ufff8\026\ufff8\027\ufff8\030\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\041\ufff8\001\002\000\004\040\152\001\002" +
    "\000\004\022\153\001\002\000\022\025\106\026\114\027" +
    "\120\030\027\034\010\035\017\036\014\041\116\001\002" +
    "\000\004\023\155\001\002\000\004\002\000\001\002\000" +
    "\004\023\ufffe\001\002\000\004\023\uffff\001\002\000\004" +
    "\041\161\001\002\000\006\010\023\032\022\001\002\000" +
    "\026\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\041\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\012\006\010" +
    "\012\011\014\015\001\001\000\004\014\157\001\001\000" +
    "\012\003\156\006\010\012\011\014\015\001\001\000\012" +
    "\003\155\006\010\012\011\014\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\067\014\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\023\015" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\031\017\030\022\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\054\021\037\001\001\000\002\001" +
    "\001\000\010\016\034\017\030\022\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\042\021\037\001" +
    "\001\000\002\001\001\000\010\016\053\017\030\022\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\061\017\030\022\027\023\060\001\001\000\002\001\001" +
    "\000\004\024\063\001\001\000\010\016\064\017\030\022" +
    "\027\001\001\000\002\001\001\000\004\024\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\073\014\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\076\001\001\000\002\001\001\000\004\014\100\001\001" +
    "\000\002\001\001\000\004\011\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\110\005\112\012\107" +
    "\014\015\022\116\025\114\026\111\001\001\000\002\001" +
    "\001\000\010\016\141\017\030\022\027\001\001\000\016" +
    "\004\140\012\107\014\015\022\116\025\114\026\111\001" +
    "\001\000\020\004\110\005\137\012\107\014\015\022\116" +
    "\025\114\026\111\001\001\000\016\004\136\012\107\014" +
    "\015\022\116\025\114\026\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\126\012\107\014\015\022" +
    "\116\025\114\026\111\001\001\000\004\015\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\121\017" +
    "\030\022\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\130\012\107\014\015\022\116" +
    "\025\114\026\111\001\001\000\002\001\001\000\010\016" +
    "\132\017\030\022\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\110\005\143\012\107\014\015\022\116\025" +
    "\114\026\111\001\001\000\002\001\001\000\010\016\145" +
    "\017\030\022\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\153\012\107\014\015\022\116\025\114\026" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\161\015\020\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInit start_val = (SymbolInit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= DECLARE LKEY DEF RKEY MAIN LKEY PROG RKEY 
            {
              SymbolInit RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEF ::= DFUNCION DEF 
            {
              SymbolDef RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEF ::= DECLARACION DEF 
            {
              SymbolDef RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEF ::= 
            {
              SymbolDef RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEF",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROG ::= SENTENCE PROG RKEY PROG 
            {
              SymbolProg RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROG ::= SENTENCEAUX PROG 
            {
              SymbolProg RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROG ::= DECLARACION PROG 
            {
              SymbolProg RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE ::= IF LPAREN EXPRESION RPAREN LKEY 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCE ::= WHILE LPAREN EXPRESION RPAREN LKEY 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCEAUX ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Object RESULT =null;
		 System.out.println( v.value ) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCEAUX",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCEAUX ::= ID ASIGNACION 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCEAUX",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCEAUX ::= FUNCION PUNTYCOMA 
            {
              Object RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCEAUX",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= RETRN EXPRESION PUNTYCOMA CUERPO 
            {
              SymbolCuerpo RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= PROG CUERPO 
            {
              SymbolCuerpo RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= 
            {
              SymbolCuerpo RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DFUNCION ::= FUNCTION RETURN ID LPAREN PARAMETRO RPAREN LKEY CUERPO RKEY 
            {
              SymbolDfuncion RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DFUNCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURN ::= TYPE 
            {
              SymbolReturn RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RETURN ::= 
            {
              SymbolReturn RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETRO ::= TYPE ID PARAMCONCAT 
            {
              SymbolParametro RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETRO ::= 
            {
              SymbolParametro RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMCONCAT ::= COMA TYPE ID PARAMCONCAT 
            {
              SymbolParamconcat RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMCONCAT ::= 
            {
              SymbolParamconcat RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= CONST TYPE ID DECLAREND 
            {
              SymbolDeclaracion RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= TYPE ID DECLAREND 
            {
              SymbolDeclaracion RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLAREND ::= ASIGNACION 
            {
              SymbolDeclarend RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLAREND ::= PUNTYCOMA 
            {
              SymbolDeclarend RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPE ::= INT 
            {
              SymbolType RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPE ::= BOOL 
            {
              SymbolType RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= IGUAL EXPRESION 
            {
              SymbolAsignacion RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= VALOR OPERACION 
            {
              SymbolExpresion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolValor v1 = (SymbolValor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacion v2 = (SymbolOperacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpresion(v1, v2) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= LPAREN EXPRESION RPAREN OPERACION 
            {
              SymbolExpresion RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= ID 
            {
              SymbolValor RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= NUMERO 
            {
              SymbolValor RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= BOLEAN 
            {
              SymbolValor RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR ::= FUNCION 
            {
              SymbolValor RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OP EXPRESION 
            {
              SymbolOperacion RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOp v1 = (SymbolOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresion v2 = (SymbolExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOperacion(v1, v2.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= 
            {
              SymbolOperacion RESULT =null;
		 RESULT = new SymbolOperacion() 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= MULT 
            {
              SymbolOp RESULT =null;
		 RESULT =  ParserSym.MULT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP ::= DIV 
            {
              SymbolOp RESULT =null;
		 RESULT = "/" 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP ::= SUMA 
            {
              SymbolOp RESULT =null;
		 RESULT = ParserSym.SUMA 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP ::= RESTA 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP ::= MAYORQUE 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP ::= MENORQUE 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= MAYORIGU 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= MENORIGU 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= IGUALES 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= OR 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP ::= AND 
            {
              SymbolOp RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= IN LPAREN RPAREN 
            {
              SymbolFuncion RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= ID LPAREN INPARAM RPAREN 
            {
              SymbolFuncion RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INPARAM ::= EXPRESION INPARAMCONC 
            {
              SymbolInparam RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPARAM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INPARAM ::= 
            {
              SymbolInparam RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPARAM",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INPARAMCONC ::= COMA EXPRESION INPARAMCONC 
            {
              SymbolInparamconc RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPARAMCONC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INPARAMCONC ::= 
            {
              SymbolInparamconc RESULT =null;
		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INPARAMCONC",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
